plugins {
    id 'jacoco'
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'org.sonarqube' version '2.7'
}

apply plugin: 'war'

group = 'hu.minhiriathaen'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '14'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-ui:1.4.5'
    implementation 'com.atlassian.connect:atlassian-connect-spring-boot-core:2.2.3'
    implementation 'com.atlassian.connect:atlassian-connect-spring-boot-starter:2.2.3'
    implementation 'com.atlassian.connect:atlassian-connect-spring-boot-jpa-starter:2.2.3'
    implementation 'org.postgresql:postgresql'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
    testRuntimeOnly 'org.hsqldb:hsqldb:2.0.0'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation("org.assertj:assertj-core:3.17.2")
}

test {
    useJUnitPlatform()
    jvmArgs '-Duser.timezone=UTC'
}

bootRun {
    jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"]
}

bootWar {
    archiveFileName.set 'oqcp-backend.war'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

checkstyle {
    config = resources.text.fromFile('config/checkstyle/google_checks_oqcp.xml')
    toolVersion '8.37'
}

pmd {
    consoleOutput = true
    toolVersion = "6.29.0"
    ruleSets = []
    tasks.pmdMain {
        ruleSetConfig = resources.text.fromFile('config/pmd/ruleset-main.xml')
    }
    tasks.pmdTest {
        ruleSetConfig = resources.text.fromFile('config/pmd/ruleset-test.xml')
    }
}

compileJava.dependsOn 'googleJavaFormat'

jacocoTestReport.dependsOn 'test'

project.tasks["sonarqube"].dependsOn jacocoTestReport